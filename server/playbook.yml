- name: provision server
  hosts: '*'
  tasks:
    - name: gather service facts
      ansible.builtin.service_facts:

    - name: remove cloud-init ssh configuration
      ansible.builtin.file:
        path: "/etc/ssh/sshd_config.d/50-cloud-init.conf"
        state: absent
      become: true

    - name: remove cloud-init profile configuration
      ansible.builtin.file:
        path: "/etc/profile.d/Z99-cloudinit-warnings.sh"
        state: absent
      become: true

    - name: remove cloud-init netplan configuration
      ansible.builtin.file:
        path: "/etc/netplan/50-cloud-init.yaml"
        state: absent
      become: true

    - name: detect cloud-init configuration
      ansible.builtin.stat:
        path: "/etc/cloud/cloud.cfg.d"
      register: cloud_cfg_d

    - name: disable cloud-init network configuration
      ansible.builtin.copy:
        dest: "/etc/cloud/cloud.cfg.d/99-disable-network-config.cfg"
        content: |
          network:
            config: disabled
      become: true
      when: "cloud_cfg_d.stat.exists and cloud_cfg_d.stat.isdir"

    - name: disable cloud-init
      ansible.builtin.service:
        name: cloud-init
        enabled: false
        state: stopped
      become: true
      when: "'cloud-init.service' in ansible_facts.services"

    - name: disable cloud-init-local
      ansible.builtin.service:
        name: cloud-init-local
        enabled: false
        state: stopped
      become: true
      when: "'cloud-init-local.service' in ansible_facts.services"

    - name: enable ssh server
      ansible.builtin.service:
        name: ssh
        enabled: true
        state: started
      become: true

    - name: set hostname
      ansible.builtin.hostname:
        name: rvcrails.nmfs.noaa.gov
      become: true

    - name: replace hostname in /etc/hosts
      ansible.builtin.replace:
        path: /etc/hosts
        regexp: "^127.0.1.1 .*$"
        replace: "127.0.1.1 rvcrails rvcrails.nmfs.noaa.gov"
      become: true

    # IPv6 is not currently available in production. Make sure it does not
    # accidentally get enabled.
    - name: disable ipv6
      ansible.posix.sysctl:
        name: net.ipv6.conf.all.disable_ipv6
        value: "1"
        sysctl_file: "/etc/sysctl.d/99-disable-ipv6.conf"
        reload: true
      become: true

    - name: create systemd service to regenerate openssh host keys
      ansible.builtin.copy:
        dest: /etc/systemd/system/reconfigure-openssh-server.service
        content: |
          [Unit]
          Description=Regenerate SSH host keys if missing
          ConditionPathExists=!/etc/ssh/ssh_host_rsa_key
          Before=ssh.service

          [Service]
          Type=oneshot
          ExecStart=/usr/sbin/dpkg-reconfigure openssh-server
          RemainAfterExit=true

          [Install]
          WantedBy=multi-user.target
      become: true

    - name: enable systemd service for reconfigure-openssh-server
      ansible.builtin.service:
        name: reconfigure-openssh-server
        enabled: true
      become: true

    - name: install required packages
      ansible.builtin.package:
        name:
          - build-essential
          - libedit-dev
          - libffi-dev
          - libpq-dev
          - libyaml-dev
          - sendmail
          - unzip
          - zlib1g-dev
      become: true

    - name: install required libraries for ansible
      ansible.builtin.package:
        name:
          # Required for https://docs.ansible.com/ansible-core/2.17/playbook_guide/playbooks_privilege_escalation.html#risks-of-becoming-an-unprivileged-user
          - acl
          # Required for community.postgresql
          - python3-psycopg2
      become: true

    - name: create user alindeman
      ansible.builtin.user:
        name: alindeman
        create_home: true
        password: '!' # disable password
        shell: /bin/bash
        groups:
          - users
          - sudo
      become: true

    - name: install ssh key for alindeman
      ansible.posix.authorized_key:
        user: alindeman
        key: "https://github.com/alindeman-NOAA.keys"
      become: true

    - name: create user jeremiaheb
      ansible.builtin.user:
        name: jeremiaheb
        create_home: true
        password: "$6$fFfXVu1e4x8eDD/c$OC6TS/4ZCdSZs0QSdG6F/rIYZ0sE3nXoUZnAFhcv4fbsircL/3ET/R.qJU/F0Ayl9O.Z94cD3vNVwmDWUZYfE1"
        shell: /bin/bash
        groups:
          - users
          - sudo
      become: true

    - name: install ssh key for jeremiaheb
      ansible.posix.authorized_key:
        user: jeremiaheb
        key: "https://github.com/jeremiaheb.keys"
      become: true

    - name: install postgresql server
      ansible.builtin.package:
        name:
          - postgresql
          - postgresql-contrib
      become: true

    - name: create rvcrails_development database user
      community.postgresql.postgresql_user:
        name: rvcrails_development
        password: rvcrails_development
      become: true
      become_user: postgres

    - name: create rvcrails_development database
      community.postgresql.postgresql_db:
        name: rvcrails_development
        owner: rvcrails_development
      become: true
      become_user: postgres

    - name: create rvcrails_test database user
      community.postgresql.postgresql_user:
        name: rvcrails_test
        password: rvcrails_test
        # Required to create temporary datdabases for test parallelization
        role_attr_flags: "CREATEDB"
      become: true
      become_user: postgres

    - name: create rvcrails_test database
      community.postgresql.postgresql_db:
        name: rvcrails_test
        owner: rvcrails_test
      become: true
      become_user: postgres

    - name: create rvcrails_production database user
      community.postgresql.postgresql_user:
        name: rvcrails_production
        password: rvcrails_production
      become: true
      become_user: postgres

    - name: create rvcrails_production databases
      community.postgresql.postgresql_db:
        name: "{{ item }}"
        owner: rvcrails_production
      with_items:
        - "rvcrails_production"
        - "rvcrails_production_cable"
        - "rvcrails_production_cache"
        - "rvcrails_production_queue"
      become: true
      become_user: postgres

    - name: install apache2 server
      ansible.builtin.package:
        name: apache2
      become: true

    - name: disable default apache2 index page
      ansible.builtin.file:
        path: "/var/www/html/index.html"
        state: absent
      become: true

    - name: disable serve-cgi-bin apache2 conf
      ansible.builtin.command:
        cmd: "a2disconf serve-cgi-bin"
        removes: "/etc/apache2/conf-enabled/serve-cgi-bin.conf"
      become: true
      notify: reload apache2

    - name: disable default apache2 site
      ansible.builtin.command:
        cmd: "a2dissite 000-default"
        removes: "/etc/apache2/sites-enabled/000-default.conf"
      become: true
      notify: reload apache2

    - name: enable proxy_http apache2 module
      ansible.builtin.command:
        cmd: "a2enmod proxy_http"
        creates: "/etc/apache2/mods-enabled/proxy_http.load"
      become: true
      notify: restart apache2

    - name: enable headers apache2 module
      ansible.builtin.command:
        cmd: "a2enmod headers"
        creates: "/etc/apache2/mods-enabled/headers.load"
      become: true
      notify: restart apache2

    - name: create rvcrails apache2 site
      ansible.builtin.copy:
        dest: "/etc/apache2/sites-available/rvcrails.conf"
        content: |
          Listen 8000
          <VirtualHost *:80 *:8000>
            # Static assets
            <Directory "/var/www/apps/rvc_rails/current/public">
              Options FollowSymLinks
              AllowOverride None
              Require all granted
            </Directory>
            Alias "/rvc_analysis20/assets" "/var/www/apps/rvc_rails/current/public/rvc_analysis20/assets"
            ProxyPass "/rvc_analysis20/assets" "!"

            ProxyPass "/rvc_analysis20" "unix:////var/www/apps/rvc_rails/shared/tmp/sockets/puma.sock|http://localhost/rvc_analysis20"
            ProxyPassReverse "/rvc_analysis20" "unix:////var/www/apps/rvc_rails/shared/tmp/sockets/puma.sock|http://localhost/rvc_analysis20"

            # Assume TLS-terminating proxy when host is noaa.gov
            <If "%{HTTP_HOST} =~ /\.noaa\.gov$/">
              RequestHeader set X-Forwarded-Proto "https"
            </If>

            ErrorLog "${APACHE_LOG_DIR}/error.log"
            CustomLog "${APACHE_LOG_DIR}/access.log" combined
          </VirtualHost>
      become: true
      notify: reload apache2

    - name: enable rvcrails apache2 site
      ansible.builtin.command:
        cmd: "a2ensite rvcrails"
        creates: "/etc/apache2/sites-enabled/rvcrails.conf"
      become: true
      notify: reload apache2

    - name: create /var/www directory
      ansible.builtin.file:
        path: /var/www
        owner: root
        group: root
        mode: "0755"
        state: directory
      become: true

    - name: create /var/www/apps directory
      ansible.builtin.file:
        path: /var/www/apps
        owner: root
        group: root
        mode: "0755"
        state: directory
      become: true

    - name: create user rvcrails
      ansible.builtin.user:
        name: rvcrails
        home: /var/www/apps/rvc_rails
        create_home: true
        password: '!' # disable password
        shell: /bin/bash
      become: true

    - name: make rvcrails directory world readable
      ansible.builtin.file:
        path: /var/www/apps/rvc_rails
        mode: "0755"
        owner: rvcrails
        group: rvcrails
        state: "directory"
      become: true

    - name: make rvcrails socket directory world readable
      ansible.builtin.file:
        path: "{{ item }}"
        mode: "0755"
        owner: rvcrails
        group: rvcrails
        state: "directory"
      become: true
      with_items:
        - "/var/www/apps/rvc_rails/shared"
        - "/var/www/apps/rvc_rails/shared/tmp"
        - "/var/www/apps/rvc_rails/shared/tmp/sockets"

    - name: add /vagrant as a safe git directory for local deployments
      ansible.builtin.copy:
        dest: /var/www/apps/rvc_rails/.gitconfig
        content: |
          [safe]
          directory = /vagrant/.git
        owner: rvcrails
        group: rvcrails
        mode: "0644"
      become: true
      become_user: rvcrails

    - name: install deploy keys for rvcrails
      ansible.posix.authorized_key:
        user: rvcrails
        key: "https://github.com/{{ item }}.keys"
      become: true
      with_items:
        # GitHub usernames
        - "alindeman-NOAA"
        - "jeremiaheb"

    - name: install rbenv
      ansible.builtin.git:
        repo: "https://github.com/rbenv/rbenv"
        dest: "/var/www/apps/rvc_rails/.rbenv"
        version: "v1.3.2"
      become: true
      become_user: rvcrails

    - name: install ruby-build
      ansible.builtin.git:
        repo: "https://github.com/rbenv/ruby-build"
        dest: "/var/www/apps/rvc_rails/.rbenv/plugins/ruby-build"
        version: "v20250925"
      become: true
      become_user: rvcrails

    - name: add rbenv init to ~/.bashrc
      ansible.builtin.blockinfile:
        path: "/var/www/apps/rvc_rails/.bashrc"
        marker: "# {mark} ANSIBLE MANAGED RBENV INIT"
        block: |
          eval "$(~/.rbenv/bin/rbenv init - --no-rehash bash)"
      become: true
      become_user: rvcrails

    - name: add convenient environment variables to ~/.bashrc
      ansible.builtin.blockinfile:
        path: "/var/www/apps/rvc_rails/.bashrc"
        marker: "# {mark} ANSIBLE MANAGED ENV INIT"
        block: |
          export RAILS_ENV="production"
      become: true
      become_user: rvcrails

    - name: install ruby 3.4.6
      ansible.builtin.command:
        cmd: "/var/www/apps/rvc_rails/.rbenv/bin/rbenv install 3.4.6"
        creates: "/var/www/apps/rvc_rails/.rbenv/versions/3.4.6"
      become: true
      become_user: rvcrails

    - name: install nvm
      ansible.builtin.git:
        repo: "http://github.com/nvm-sh/nvm"
        dest: "/var/www/apps/rvc_rails/.nvm"
        version: "v0.40.3"
        recursive: false
      become: true
      become_user: rvcrails

    - name: add nvm init to ~/.bashrc
      ansible.builtin.blockinfile:
        path: "/var/www/apps/rvc_rails/.bashrc"
        marker: "# {mark} ANSIBLE MANAGED NVM INIT"
        block: |
          source "$HOME/.nvm/nvm.sh"
      become: true
      become_user: rvcrails

    - name: add nvm init as rbenv exec hook
      ansible.builtin.copy:
        dest: "/var/www/apps/rvc_rails/.rbenv/rbenv.d/exec/nvm.bash"
        content: |
          source "$HOME/.nvm/nvm.sh"
      become: true
      become_user: rvcrails

    - name: install node 22.16.0
      ansible.builtin.shell: |
        . "$HOME/.nvm/nvm.sh" --no-use
        nvm install 22.16.0
      args:
        executable: /bin/bash
        creates: "/var/www/apps/rvc_rails/.nvm/versions/node/v22.16.0"
      become: true
      become_user: rvcrails

    - name: install yarn package manager
      community.general.npm:
        name: yarn
        version: "1.22.22"
        global: true
      environment:
        PATH: "/var/www/apps/rvc_rails/.nvm/versions/node/v22.16.0/bin:{{ ansible_env.PATH }}"
      become: true
      become_user: rvcrails

    - name: create systemd socket for rvcrails
      ansible.builtin.copy:
        dest: /etc/systemd/system/rvcrails.socket
        content: |
          [Unit]
          Description=rvc_rails

          [Socket]
          ListenStream=/var/www/apps/rvc_rails/shared/tmp/sockets/puma.sock
          SocketUser=rvcrails
          SocketGroup=rvcrails
          ReusePort=true
          Backlog=1024

          [Install]
          WantedBy=sockets.target
      become: true

    - name: enable systemd socket for rvcrails
      ansible.builtin.service:
        name: rvcrails.socket
        enabled: true
      become: true

    - name: create systemd service for rvcrails
      ansible.builtin.copy:
        dest: /etc/systemd/system/rvcrails.service
        content: |
          [Unit]
          Description=rvc_rails
          After=network.target
          Requires=rvcrails.socket

          [Service]
          User=rvcrails
          Group=rvcrails
          WorkingDirectory=/var/www/apps/rvc_rails/current
          Environment=RAILS_ENV=production RAILS_LOG_TO_STDOUT=true
          ExecStart=/var/www/apps/rvc_rails/.rbenv/bin/rbenv exec bundle exec puma -C /var/www/apps/rvc_rails/current/config/puma.rb --bind-to-activated-sockets=only
          RestartSec=1
          Restart=on-failure

          [Install]
          WantedBy=multi-user.target
      become: true
      notify: restart rvcrails

    - name: enable systemd service for rvcrails
      ansible.builtin.service:
        name: rvcrails.service
        enabled: true
      become: true

    - name: allow rvcrails to manage its systemd service
      ansible.builtin.copy:
        dest: /etc/sudoers.d/rvcrails
        content: |
          rvcrails ALL=(ALL) NOPASSWD: /usr/bin/systemctl start rvcrails.service
          rvcrails ALL=(ALL) NOPASSWD: /bin/systemctl start rvcrails.service
          rvcrails ALL=(ALL) NOPASSWD: /usr/bin/systemctl stop rvcrails.service
          rvcrails ALL=(ALL) NOPASSWD: /bin/systemctl stop rvcrails.service
          rvcrails ALL=(ALL) NOPASSWD: /usr/bin/systemctl reload rvcrails.service
          rvcrails ALL=(ALL) NOPASSWD: /bin/systemctl reload rvcrails.service
          rvcrails ALL=(ALL) NOPASSWD: /usr/bin/systemctl restart rvcrails.service
          rvcrails ALL=(ALL) NOPASSWD: /bin/systemctl restart rvcrails.service
        owner: root
        group: root
        mode: "0440"
      become: true

    # --------------------------
    # The following tasks are conditional on `development_build` being defined,
    # meaning this playbook is running in Vagrant for local development. The
    # tasks are skipped because they are meaningless for the production virtual
    # machine, which is not used with Vagrant.
    # --------------------------

    # We occasionally see timeouts of this service when using virtualized
    # network interfaces. It does not always happen, but when it does, it makes
    # the boot take a very long time.
    #
    # At some point in the future it may be good to remove this and see if the
    # problem still exists.
    - name: install required packages for development
      ansible.builtin.package:
        name:
          - xdg-utils # for chrome/chromedriver
          - libgbm1 # for chrome/chromedriver
          - libasound2 # chrome chrome/chromedriver
      become: true
      when: development_build is defined

    # See https://googlechromelabs.github.io/chrome-for-testing/ for latest versions
    - name: download chrome binary
      ansible.builtin.get_url:
        url: "https://storage.googleapis.com/chrome-for-testing-public/138.0.7204.92/linux64/chrome-linux64.zip"
        dest: "{{ ansible_user_dir }}/chrome-linux64.zip"
      when: development_build is defined

    - name: unzip chrome binary
      ansible.builtin.unarchive:
        src: "{{ ansible_user_dir }}/chrome-linux64.zip"
        dest: "{{ ansible_user_dir }}"
        remote_src: true
      when: development_build is defined

    - name: download chromedriver binary
      ansible.builtin.get_url:
        url: "https://storage.googleapis.com/chrome-for-testing-public/138.0.7204.92/linux64/chromedriver-linux64.zip"
        dest: "{{ ansible_user_dir }}/chromedriver-linux64.zip"
      when: development_build is defined

    - name: unzip chromedriver binary
      ansible.builtin.unarchive:
        src: "{{ ansible_user_dir }}/chromedriver-linux64.zip"
        dest: "{{ ansible_user_dir }}"
        remote_src: true
      when: development_build is defined

    - name: add chrome and chromedriver to PATH
      ansible.builtin.blockinfile:
        path: "{{ ansible_user_dir }}/.bashrc"
        marker: "# {mark} ANSIBLE MANAGED CHROMEDRIVER INIT"
        block: |
          export PATH="$PATH:$HOME/chrome-linux64:$HOME/chromedriver-linux64"
      when: development_build is defined

    - name: disable waiting for network on boot
      ansible.builtin.service:
        name: systemd-networkd-wait-online
        enabled: false
      become: true
      when: development_build is defined

    - name: install rbenv
      ansible.builtin.git:
        repo: "https://github.com/rbenv/rbenv"
        dest: "{{ ansible_user_dir }}/.rbenv"
        version: "v1.3.2"
      when: development_build is defined

    - name: install ruby-build
      ansible.builtin.git:
        repo: "https://github.com/rbenv/ruby-build"
        dest: "{{ ansible_user_dir }}/.rbenv/plugins/ruby-build"
        version: "v20250925"
      when: development_build is defined

    - name: add rbenv init to ~/.bashrc
      ansible.builtin.blockinfile:
        path: "{{ ansible_user_dir }}/.bashrc"
        marker: "# {mark} ANSIBLE MANAGED RBENV INIT"
        block: |
          eval "$(~/.rbenv/bin/rbenv init - --no-rehash bash)"
      when: development_build is defined

    - name: install ruby 3.4.6
      ansible.builtin.command:
        cmd: "{{ ansible_user_dir }}/.rbenv/bin/rbenv install 3.4.6"
        creates: "{{ ansible_user_dir }}/.rbenv/versions/3.4.6"
      when: development_build is defined

    - name: install nvm
      ansible.builtin.git:
        repo: "http://github.com/nvm-sh/nvm"
        dest: "{{ ansible_user_dir }}/.nvm"
        version: "v0.40.3"
        recursive: false
      when: development_build is defined

    - name: add nvm init to ~/.bashrc
      ansible.builtin.blockinfile:
        path: "{{ ansible_user_dir }}/.bashrc"
        marker: "# {mark} ANSIBLE MANAGED NVM INIT"
        block: |
          source "$HOME/.nvm/nvm.sh"
      when: development_build is defined

    - name: install node 22.16.0
      ansible.builtin.shell: |
        . "$HOME/.nvm/nvm.sh" --no-use
        nvm install 22.16.0
      args:
        executable: /bin/bash
        creates: "{{ ansible_user_dir }}/.nvm/versions/node/v22.16.0"
      when: development_build is defined

    - name: install yarn package manager
      community.general.npm:
        name: yarn
        version: "1.22.22"
        global: true
      environment:
        PATH: "{{ ansible_user_dir }}/.nvm/versions/node/v22.16.0/bin:{{ ansible_env.PATH }}"
      when: development_build is defined

    - name: add automatic cd to /vagrant in ~/.bashrc
      ansible.builtin.blockinfile:
        path: "{{ ansible_user_dir }}/.bashrc"
        marker: "# {mark} ANSIBLE MANAGED CD INIT"
        block: |
          if [ "${PWD-}" = "/home/vagrant" ]; then
            cd /vagrant
          fi
      when: development_build is defined

    - name: create /home/vagrant/node_modules
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/node_modules"
        state: directory
      when: development_build is defined

    - name: bind mount /vagrant/node_modules to /home/vagrant/node_modules so it supports symbolic links
      ansible.posix.mount:
        src: "/home/vagrant/node_modules"
        path: "/vagrant/node_modules"
        fstype: "none"
        opts: "bind,nofail"
        state: mounted
      become: true
      when: development_build is defined

  handlers:
    - name: reload apache2
      ansible.builtin.service:
        name: apache2
        state: reloaded
      become: true

    - name: restart apache2
      ansible.builtin.service:
        name: apache2
        state: restarted
      become: true

    - name: restart rvcrails
      ansible.builtin.service:
        name: rvcrails
        state: restarted
      become: true

    - name: restart sshd
      ansible.builtin.service:
        name: sshd
        state: restarted
      become: true